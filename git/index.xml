<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on liangweidong blog</title>
    <link>https://liangweidonggood.github.io/git/index.html</link>
    <description>Recent content in Git on liangweidong blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 18 Sep 2023 08:55:43 +0800</lastBuildDate><atom:link href="https://liangweidonggood.github.io/git/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Base</title>
      <link>https://liangweidonggood.github.io/git/base/index.html</link>
      <pubDate>Mon, 18 Sep 2023 09:10:36 +0800</pubDate>
      <guid>https://liangweidonggood.github.io/git/base/index.html</guid>
      <description>删除远程中的.idea 1.添加.gitignore文件 **/.idea **/target 2.删除远程文件 git rm -r -n --cached 文件/文件夹名称 加上 -n 这个参数，执行命令时，是不会删除任何文件，而是展示此命令要删除的文件列表预览。 --cached 表示本地仍旧保留 当前目录下执行 git rm -r -n --cached yarn.lock git rm -r --cached yarn.lock git rm -r --cached .idea/* git rm -r --cached target/* 提交 git commit -m &amp;#34;删除非必要文件&amp;#34; git push origin master配置代理 //只对github.com使用代理，其他仓库不走代理 git config --global http.https://github.com.proxy socks5://127.0.0.1:1080 git config --global https.https://github.com.proxy socks5://127.0.0.1:1080 //取消github代理 git config --global --unset http.https://github.com.proxy git config --global --unset https.https://github.com.proxy撤销提交 git log 查找要撤销的commit_id q退出查看 git revert commit_idgit clone 断点续传 当git项目较大或网速不快的情况下，git clone可能会中断导致要重新操作，那如何进行断点续传呢</description>
    </item>
    <item>
      <title>Gitbash</title>
      <link>https://liangweidonggood.github.io/git/gitbash/index.html</link>
      <pubDate>Mon, 18 Sep 2023 09:13:11 +0800</pubDate>
      <guid>https://liangweidonggood.github.io/git/gitbash/index.html</guid>
      <description>git bash调用cmd中的tree命令 加上winpty去乱码 winpty tree.com : 直接调用 cmd 内置 tree.com 命令. winpty cmd //c tree : 通知 cmd 调用 tree 命令. https://github.com/git-for-windows/build-extra/releases 安装 Git For Windows 开发版,Pacman -S tree 安装 tree 命令,然后执行 tree 调用. https://sourceforge.net/projects/gnuwin32/files/tree/1.5.2.2/tree-1.5.2.2-bin.zip/download 下载 已编译好的 tree.exe 文件到 git bash 安装目录下的 /usr/bin 目录,然后执行 tree 命令.提交 step1：拉取服务器代码，更新本地代码，避免覆盖他人代码 git pull origin master step2：查看当前项目中有哪些文件被修改过 git status 1：Untracked: 未跟踪,一般为新增文件，此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged. 2：Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 3：deleted： 文件已删除，本地删除，服务器上还没有删除. 4：renamed： step 3：将状态改变的代码提交至缓存 git add .</description>
    </item>
    <item>
      <title>开发流程</title>
      <link>https://liangweidonggood.github.io/git/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/index.html</link>
      <pubDate>Mon, 18 Sep 2023 09:55:10 +0800</pubDate>
      <guid>https://liangweidonggood.github.io/git/%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B/index.html</guid>
      <description>流程 develop 开发分支：开发人员每天都需要拉取/提交最新代码的分支 test 测试分支：开发人员开发完并自测通过后，发布到测试环境的分支 release 预发布分支：测试环境测试通过后，将测试分支的代码发布到预发环境的分支（这个得看公司支不支持预发环境，没有的话就可以不采用这条分支） master 线上分支：预发环境测试通过后，运营/测试会将此分支代码发布到线上环境 hotfix 分支：在 master 发现新的 bug 时，需要创建一个 hotfix，完成后，合并到 master 和 develop 分支 大致流程
开发人员每天都需要拉取、提交最新的代码到 develop 分支 开发完毕后，开始 集成测试 ，测试无误后提交到 test 分支，并发布到测试环境，交由测试人员测试 测试环境通过后，发布到 release 分支上，进行预发布环境测试 预发环境通过后，发布到 master 分支上并打上标签 tag 如果线上分支出现 bug，这时开发者应该基于预发布（没有预发布环境就用 master 分支），新建一个 bug 分支用来临时解决 bug，处理完成后申请合并到预发布分支（好处是不会影响正在开发中的功能） 分支模型和权限 我们用的是master（生产），release（预生产），integration（测试），develop（开发） 分支模型
git平台：gitlab
分支权限 前端后端 ：拥有的的权限只有开发分支的合并
开发组长 ：拥有的的权限有 开发 、 测试 、 预生产 、生产分支的合并
发布权限 前端后端 ：拥有的的权限只有开发环境的发布
开发组长 ：拥有的的权限只有 开发环境 **、**测试环境的发布
测试 ：拥有的的权限只有 测试环境 **、**预生产的发布
运维 ：拥有的的权限只有生产的发布</description>
    </item>
    <item>
      <title>二次开发</title>
      <link>https://liangweidonggood.github.io/git/%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/index.html</link>
      <pubDate>Mon, 18 Sep 2023 09:13:11 +0800</pubDate>
      <guid>https://liangweidonggood.github.io/git/%E4%BA%8C%E6%AC%A1%E5%BC%80%E5%8F%91/index.html</guid>
      <description>需求 想在一个开源的项目上做一些二次开发，同时该开源项目也一直在迭代，那么如何保持跟它同步同时又保留自己的改动呢。方案 安装 git ，分别新建 master 、 develop 分支。 当开发商发来新的版本后，基于 master 创建一个新的 sp-001 分支，将更新包直接在 sp-001 分支上面覆盖。 然后切换到 develop 分支，将 sp-001 合并到 develop ，解决冲突，冲突解决完成后，确认测试没问题，再 merge 到 master ，打上 tag 后 release 新版本，部署服务器去。方案二 1.fork开源项目到自己的仓库,比如从 github.com/abc/cherry =&amp;gt; github.com/dhl/cherry 然后clone git clone https://github.com/dhl/cherry 2.接下来cd到自己的仓库，开始如下操作 cd cherry git checkout -b dev #默认是master，master里永远跟开源的保持一致 git pull git checkout master #切回master，做更新 git remote add upstream https://github.com/abc/cherry.git #设置upstream开源仓库. git fetch upstream master #拉取开源的仓库upstream的master到本地 git merge upstream/master #合并到本地master git checkout dev #切换到dev git rebase master #把刚刚拉取的更新merge到dev分支实操 github上创建一个项目focktest https://github.</description>
    </item>
    <item>
      <title>Github</title>
      <link>https://liangweidonggood.github.io/git/github/index.html</link>
      <pubDate>Mon, 18 Sep 2023 09:02:24 +0800</pubDate>
      <guid>https://liangweidonggood.github.io/git/github/index.html</guid>
      <description>github </description>
    </item>
  </channel>
</rss>